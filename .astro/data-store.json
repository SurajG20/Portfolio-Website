[["Map",1,2,9,10,71,72,112,113,136,137,307,308,374,375],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.2","content-config-digest","6c14a415ea339a44","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,28,29,43,44,56,57],"ai-image-editor",{"id":11,"data":13,"filePath":24,"digest":25,"rendered":26},{"title":14,"description":15,"url":16,"featured":17,"techs":18},"AI Image Editor Pro","An AI-powered image editing tool that allows users to edit photos using natural language commands. Built with React, Python, and integrated with various AI models for intelligent image manipulation.","https://ai-image-editor-pro.vercel.app",true,[19,20,21,22,23],"React","Python","TensorFlow","FastAPI","Docker","src/content/projects/ai-image-editor.md","1bcca9dd567bf3bf",{"html":27},"","project-name",{"id":28,"data":30,"filePath":40,"digest":41,"rendered":42},{"title":31,"description":32,"url":33,"featured":17,"techs":34},"DevFlow - Developer Q&A Platform","A modern Stack Overflow alternative built with Next.js 13, TypeScript, and MongoDB. Features real-time updates, AI-powered answer suggestions, and a responsive design.","https://devflow-demo.vercel.app",[35,36,37,38,39],"Next.js","TypeScript","MongoDB","TailwindCSS","OpenAI","src/content/projects/project-name.md","cbb58181a7e9ba50",{"html":27},"task-management-app",{"id":43,"data":45,"filePath":53,"digest":54,"rendered":55},{"title":46,"description":47,"url":48,"featured":17,"techs":49},"TaskFlow - Project Management App","A modern task management application built with React and Node.js. Features real-time updates, team collaboration, and automated task scheduling.","https://taskflow-demo.vercel.app",[19,50,37,51,52],"Node.js","Socket.IO","Redux","src/content/projects/task-management-app.md","f9b522546a51ee06",{"html":27},"weather-dashboard",{"id":56,"data":58,"filePath":68,"digest":69,"rendered":70},{"title":59,"description":60,"url":61,"featured":17,"techs":62},"Weather Dashboard Pro","A comprehensive weather monitoring dashboard with interactive maps, historical data analysis, and severe weather alerts.","https://weather-dashboard-pro.vercel.app",[63,64,65,66,67],"Vue.js","Express","PostgreSQL","MapBox","Chart.js","src/content/projects/weather-dashboard.md","c6e427e5c95b655d",{"html":27},"bookmarks",["Map",73,74,86,87,99,100],"rust-book",{"id":73,"data":75,"filePath":83,"digest":84,"rendered":85},{"title":76,"type":77,"author":78,"url":79,"publishedAt":80,"createdAt":81,"description":82},"The Rust Programming Language","book","Steve Klabnik and Carol Nichols","https://doc.rust-lang.org/book/",["Date","2023-05-15T00:00:00.000Z"],["Date","2024-01-02T00:00:00.000Z"],"The official book for learning Rust, covering everything from basic syntax to advanced concepts","src/content/bookmarks/rust-book.md","f531c8380b78fae3",{"html":27},"system-design",{"id":86,"data":88,"filePath":96,"digest":97,"rendered":98},{"title":89,"type":90,"author":91,"url":92,"publishedAt":93,"createdAt":94,"description":95},"System Design: The Big Archive","video","Martin Kleppmann","https://www.youtube.com/watch?v=UEAMfLPZZhE",["Date","2023-11-20T00:00:00.000Z"],["Date","2024-01-08T00:00:00.000Z"],"A deep dive into distributed systems design, covering scalability, consistency, and real-world architectures","src/content/bookmarks/system-design.md","9dace3ef7dbcd874",{"html":27},"web-performance",{"id":99,"data":101,"filePath":109,"digest":110,"rendered":111},{"title":102,"type":103,"author":104,"url":105,"publishedAt":106,"createdAt":107,"description":108},"Web Performance: The Definitive Guide","article","Addy Osmani","https://web.dev/articles/performance-get-started",["Date","2023-12-10T00:00:00.000Z"],["Date","2024-01-05T00:00:00.000Z"],"A comprehensive guide to web performance optimization, covering Core Web Vitals, optimization techniques, and measurement tools","src/content/bookmarks/web-performance.md","f2d43e868d4cbaf3",{"html":27},"experience",["Map",114,115,126,127],"startup-experience",{"id":114,"data":116,"filePath":123,"digest":124,"rendered":125},{"title":117,"logo":118,"description":119,"startDate":120,"endDate":121,"current":122},"Full Stack Developer at InnovateLabs","/images/companies/innovatelabs.svg","Developed and launched a real-time collaboration platform from scratch. Implemented WebSocket-based features, designed the database schema, and built a responsive front-end using React and Material-UI.",["Date","2020-06-01T00:00:00.000Z"],["Date","2021-12-31T00:00:00.000Z"],false,"src/content/experience/startup-experience.md","b6ed626a886f0867",{"html":27},"company-name",{"id":126,"data":128,"filePath":133,"digest":134,"rendered":135},{"title":129,"logo":130,"description":131,"startDate":132,"current":17},"Senior Software Engineer at TechCorp","/images/companies/techcorp.svg","Led the development of a microservices-based e-commerce platform serving 1M+ users. Improved system performance by 40% through optimization and caching strategies. Mentored junior developers and implemented CI/CD pipelines.",["Date","2022-01-01T00:00:00.000Z"],"src/content/experience/company-name.md","f2b6e33ded6a9840",{"html":27},"blog",["Map",138,139,167,168,203,204,253,254],"building-a-modern-portfolio",{"id":138,"data":140,"body":144,"filePath":145,"digest":146,"rendered":147},{"title":141,"description":142,"publishedAt":143,"draft":122},"Building a Modern Portfolio Website with Astro","A deep dive into creating a fast, modern portfolio website using Astro, focusing on performance and developer experience.",["Date","2023-12-15T00:00:00.000Z"],"Building a modern portfolio website requires careful consideration of performance, user experience, and maintainability. In this post, I'll share my experience building this website using Astro, a modern static site generator that offers excellent performance out of the box.\n\n## Why Astro?\n\nAstro has become my go-to choice for static websites due to its unique approach to JavaScript - it ships zero JavaScript by default unless explicitly needed. This results in incredibly fast page loads and excellent performance scores.\n\n## Key Features\n\n1. **Zero JavaScript by Default**: Pages load incredibly fast with minimal JavaScript\n2. **Content Collections**: Markdown-based content management with type safety\n3. **View Transitions**: Smooth page transitions for a native app-like feel\n4. **Excellent DX**: TypeScript support and great developer tooling\n\n## Performance Optimizations\n\nThe site achieves perfect Lighthouse scores through several optimizations:\n- Preloaded fonts with font-display: swap\n- Optimized images with proper sizing and formats\n- Minimal CSS with no unused styles\n- Strategic use of preloading for critical resources\n\n## Design Decisions\n\nThe design focuses on readability and minimalism while maintaining visual interest through:\n- Subtle animations and transitions\n- Strategic use of whitespace\n- Typography-first approach\n- Dark theme optimization\n\nBuilding a portfolio is more than just showcasing work - it's about creating an experience that reflects your attention to detail and technical expertise.","src/content/blog/building-a-modern-portfolio.md","08bd3d9b7e89ba3c",{"html":148,"metadata":149},"\u003Cp>Building a modern portfolio website requires careful consideration of performance, user experience, and maintainability. In this post, I’ll share my experience building this website using Astro, a modern static site generator that offers excellent performance out of the box.\u003C/p>\n\u003Ch2 id=\"why-astro\">Why Astro?\u003C/h2>\n\u003Cp>Astro has become my go-to choice for static websites due to its unique approach to JavaScript - it ships zero JavaScript by default unless explicitly needed. This results in incredibly fast page loads and excellent performance scores.\u003C/p>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Zero JavaScript by Default\u003C/strong>: Pages load incredibly fast with minimal JavaScript\u003C/li>\n\u003Cli>\u003Cstrong>Content Collections\u003C/strong>: Markdown-based content management with type safety\u003C/li>\n\u003Cli>\u003Cstrong>View Transitions\u003C/strong>: Smooth page transitions for a native app-like feel\u003C/li>\n\u003Cli>\u003Cstrong>Excellent DX\u003C/strong>: TypeScript support and great developer tooling\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"performance-optimizations\">Performance Optimizations\u003C/h2>\n\u003Cp>The site achieves perfect Lighthouse scores through several optimizations:\u003C/p>\n\u003Cul>\n\u003Cli>Preloaded fonts with font-display: swap\u003C/li>\n\u003Cli>Optimized images with proper sizing and formats\u003C/li>\n\u003Cli>Minimal CSS with no unused styles\u003C/li>\n\u003Cli>Strategic use of preloading for critical resources\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"design-decisions\">Design Decisions\u003C/h2>\n\u003Cp>The design focuses on readability and minimalism while maintaining visual interest through:\u003C/p>\n\u003Cul>\n\u003Cli>Subtle animations and transitions\u003C/li>\n\u003Cli>Strategic use of whitespace\u003C/li>\n\u003Cli>Typography-first approach\u003C/li>\n\u003Cli>Dark theme optimization\u003C/li>\n\u003C/ul>\n\u003Cp>Building a portfolio is more than just showcasing work - it’s about creating an experience that reflects your attention to detail and technical expertise.\u003C/p>",{"headings":150,"imagePaths":164,"frontmatter":165},[151,155,158,161],{"depth":152,"slug":153,"text":154},2,"why-astro","Why Astro?",{"depth":152,"slug":156,"text":157},"key-features","Key Features",{"depth":152,"slug":159,"text":160},"performance-optimizations","Performance Optimizations",{"depth":152,"slug":162,"text":163},"design-decisions","Design Decisions",[],{"title":141,"description":142,"publishedAt":166},["Date","2023-12-15T00:00:00.000Z"],"devcontainers",{"id":167,"data":169,"body":173,"filePath":174,"digest":175,"rendered":176},{"title":170,"description":171,"publishedAt":172,"draft":122},"DevContainers: The Art of Portable Development Environments","Pack your dev environment in a box and take it anywhere",["Date","2024-09-16T00:00:00.000Z"],"## The Environment Enigma\n\nYou're staring at your screen, eyes bloodshot, coffee cold. The code that worked perfectly on your machine is now throwing a tantrum on your colleague's laptop. Sound familiar? Of course it does. You're a developer, after all. You've been here before, and you'll be here again.\n\nBut what if I told you there was a way to pack up your entire development environment and take it with you? A way to ensure that your code runs the same way, every time, everywhere? Enter the world of DevContainers.\n\n## DevContainers: Your Development Environment in a Box\n\nImagine you had a magical box. No matter where you go or what machine you're on, you can open this box and voila! Your perfect development environment springs to life. That's DevContainers in a nutshell. It's like a portable, self-contained dev environment that follows you across devices and operating systems.\n\n```json\n{\n  \"name\": \"Node.js Development\",\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:0-18\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"dbaeumer.vscode-eslint\",\n        \"esbenp.prettier-vscode\"\n      ]\n    }\n  },\n  \"forwardPorts\": [3000],\n  \"postCreateCommand\": \"npm install\"\n}\n```\n\nLook at that! With just a few lines of JSON, we've defined an entire Node.js development environment. It's like magic, but better—it's DevContainers.\n\n## Where the Magic Happens\n\nNow, you might be thinking, \"Great, another tool I'll never use.\" But hold your horses, dear developer. This isn't just some fancy trick to impress your coworkers (though it will). It's a game-changer for real-world scenarios.\n\n1. **Onboarding: The New Developer Whisperer**\nPicture this: You've got a new developer joining your team, and you need to get them up and running. Without DevContainers, you'd be sending them a 50-page setup document and praying they don't miss a step. With DevContainers? It's smooth sailing.\n\n```json\n{\n  \"name\": \"Team Project Environment\",\n  \"image\": \"mcr.microsoft.com/devcontainers/base:ubuntu\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/node:1\": {},\n    \"ghcr.io/devcontainers/features/python:1\": {},\n    \"ghcr.io/devcontainers/features/go:1\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-python.python\",\n        \"golang.go\",\n        \"dbaeumer.vscode-eslint\"\n      ]\n    }\n  },\n  \"postCreateCommand\": \"scripts/setup.sh\"\n}\n```\n\nYour new developer is now a mind reader, instantly synced with your project's environment. Impressive, right?\n\n2. **Cross-Platform Development: The OS Whisperer**\nLogs are the breadcrumbs of the digital world. But what good are they if you can't tell which crumb belongs to which trail? DevContainers to the rescue!\n\n```json\n{\n  \"name\": \"Cross-Platform App\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\",\n    \"args\": { \"VARIANT\": \"16-bullseye\" }\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-vscode.cpptools\",\n        \"twxs.cmake\",\n        \"ms-vscode.cmake-tools\"\n      ]\n    }\n  },\n  \"runArgs\": [\"--cap-add=SYS_PTRACE\", \"--security-opt\", \"seccomp=unconfined\"]\n}\n```\n\nNow your development environment is like a well-trained chameleon. Windows, macOS, Linux? It doesn't care. It just works.\n\n## The Art of Container Crafting\n\nNow that you're armed with this magical box, you might be tempted to stuff it full of every development tool known to mankind. But hold on there, packrat. Here are some golden rules for using DevContainers:\n\n1. **Start Lean, Grow as Needed**: Begin with a minimal configuration and add tools as you need them. It's like packing for a trip - start with the essentials and add extras only if you have space.\n2. **Version Control Your Containers**: Keep your DevContainer configurations in version control. It's like having a blueprint for your development environment. Future you will thank present you.\n3. **Optimize for Speed**: Use multi-stage builds and mount your source code as a volume. Your DevContainer should spin up faster than you can say \"It works on my machine\".\n4. **Expect the Unexpected**: Implement fallback options. Sometimes your magical box might not open as expected. Be prepared with a Plan B.\n\n## Embrace the Box\n\nDevContainers aren't just a feature—they're a superpower. They allow you to write code that's not just portable, but predictable. It's the difference between shipping your development environment and hoping for the best, and knowing it'll work everywhere.\n\nWhether you're onboarding new team members, developing cross-platform applications, or just trying to maintain sanity across multiple projects, DevContainers are your new best friend. They're the tool you didn't know you needed, but won't be able to live without.\n\nSo go forth, dear developer. Embrace the box. Let your code run free, unshackled by the constraints of individual machines. And remember, in the wild west of software development, a well-crafted DevContainer can make all the difference between \"It works on my machine\" and \"It works. Period.\"\n\nHappy coding, and may your development environments always feel like home, no matter where you are!","src/content/blog/devcontainers.md","c804ca0b8b5a96f6",{"html":177,"metadata":178},"\u003Ch2 id=\"the-environment-enigma\">The Environment Enigma\u003C/h2>\n\u003Cp>You’re staring at your screen, eyes bloodshot, coffee cold. The code that worked perfectly on your machine is now throwing a tantrum on your colleague’s laptop. Sound familiar? Of course it does. You’re a developer, after all. You’ve been here before, and you’ll be here again.\u003C/p>\n\u003Cp>But what if I told you there was a way to pack up your entire development environment and take it with you? A way to ensure that your code runs the same way, every time, everywhere? Enter the world of DevContainers.\u003C/p>\n\u003Ch2 id=\"devcontainers-your-development-environment-in-a-box\">DevContainers: Your Development Environment in a Box\u003C/h2>\n\u003Cp>Imagine you had a magical box. No matter where you go or what machine you’re on, you can open this box and voila! Your perfect development environment springs to life. That’s DevContainers in a nutshell. It’s like a portable, self-contained dev environment that follows you across devices and operating systems.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Node.js Development\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcr.microsoft.com/devcontainers/javascript-node:0-18\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"customizations\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"vscode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"extensions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"dbaeumer.vscode-eslint\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"esbenp.prettier-vscode\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"forwardPorts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#79B8FF\">3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"postCreateCommand\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npm install\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Look at that! With just a few lines of JSON, we’ve defined an entire Node.js development environment. It’s like magic, but better—it’s DevContainers.\u003C/p>\n\u003Ch2 id=\"where-the-magic-happens\">Where the Magic Happens\u003C/h2>\n\u003Cp>Now, you might be thinking, “Great, another tool I’ll never use.” But hold your horses, dear developer. This isn’t just some fancy trick to impress your coworkers (though it will). It’s a game-changer for real-world scenarios.\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Onboarding: The New Developer Whisperer\u003C/strong>\nPicture this: You’ve got a new developer joining your team, and you need to get them up and running. Without DevContainers, you’d be sending them a 50-page setup document and praying they don’t miss a step. With DevContainers? It’s smooth sailing.\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Team Project Environment\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcr.microsoft.com/devcontainers/base:ubuntu\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"features\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"ghcr.io/devcontainers/features/node:1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"ghcr.io/devcontainers/features/python:1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"ghcr.io/devcontainers/features/go:1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"customizations\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"vscode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"extensions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"ms-python.python\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"golang.go\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"dbaeumer.vscode-eslint\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"postCreateCommand\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"scripts/setup.sh\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Your new developer is now a mind reader, instantly synced with your project’s environment. Impressive, right?\u003C/p>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Cross-Platform Development: The OS Whisperer\u003C/strong>\nLogs are the breadcrumbs of the digital world. But what good are they if you can’t tell which crumb belongs to which trail? DevContainers to the rescue!\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Cross-Platform App\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"build\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"dockerfile\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Dockerfile\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"VARIANT\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"16-bullseye\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"customizations\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"vscode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"extensions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"ms-vscode.cpptools\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"twxs.cmake\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"ms-vscode.cmake-tools\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"runArgs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--cap-add=SYS_PTRACE\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--security-opt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"seccomp=unconfined\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now your development environment is like a well-trained chameleon. Windows, macOS, Linux? It doesn’t care. It just works.\u003C/p>\n\u003Ch2 id=\"the-art-of-container-crafting\">The Art of Container Crafting\u003C/h2>\n\u003Cp>Now that you’re armed with this magical box, you might be tempted to stuff it full of every development tool known to mankind. But hold on there, packrat. Here are some golden rules for using DevContainers:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Start Lean, Grow as Needed\u003C/strong>: Begin with a minimal configuration and add tools as you need them. It’s like packing for a trip - start with the essentials and add extras only if you have space.\u003C/li>\n\u003Cli>\u003Cstrong>Version Control Your Containers\u003C/strong>: Keep your DevContainer configurations in version control. It’s like having a blueprint for your development environment. Future you will thank present you.\u003C/li>\n\u003Cli>\u003Cstrong>Optimize for Speed\u003C/strong>: Use multi-stage builds and mount your source code as a volume. Your DevContainer should spin up faster than you can say “It works on my machine”.\u003C/li>\n\u003Cli>\u003Cstrong>Expect the Unexpected\u003C/strong>: Implement fallback options. Sometimes your magical box might not open as expected. Be prepared with a Plan B.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"embrace-the-box\">Embrace the Box\u003C/h2>\n\u003Cp>DevContainers aren’t just a feature—they’re a superpower. They allow you to write code that’s not just portable, but predictable. It’s the difference between shipping your development environment and hoping for the best, and knowing it’ll work everywhere.\u003C/p>\n\u003Cp>Whether you’re onboarding new team members, developing cross-platform applications, or just trying to maintain sanity across multiple projects, DevContainers are your new best friend. They’re the tool you didn’t know you needed, but won’t be able to live without.\u003C/p>\n\u003Cp>So go forth, dear developer. Embrace the box. Let your code run free, unshackled by the constraints of individual machines. And remember, in the wild west of software development, a well-crafted DevContainer can make all the difference between “It works on my machine” and “It works. Period.”\u003C/p>\n\u003Cp>Happy coding, and may your development environments always feel like home, no matter where you are!\u003C/p>",{"headings":179,"imagePaths":195,"frontmatter":196},[180,183,186,189,192],{"depth":152,"slug":181,"text":182},"the-environment-enigma","The Environment Enigma",{"depth":152,"slug":184,"text":185},"devcontainers-your-development-environment-in-a-box","DevContainers: Your Development Environment in a Box",{"depth":152,"slug":187,"text":188},"where-the-magic-happens","Where the Magic Happens",{"depth":152,"slug":190,"text":191},"the-art-of-container-crafting","The Art of Container Crafting",{"depth":152,"slug":193,"text":194},"embrace-the-box","Embrace the Box",[],{"title":170,"description":171,"publishedAt":197,"tags":198},["Date","2024-09-16T00:00:00.000Z"],[167,199,200,201,202],"development-environment","docker","vscode","productivity","async-generators",{"id":203,"data":205,"body":209,"filePath":210,"digest":211,"rendered":212},{"title":206,"description":207,"publishedAt":208,"draft":122},"Async Generators in JavaScript: Taming the Data Flood","A deep dive into using async generators for handling large data streams efficiently",["Date","2024-09-15T00:00:00.000Z"],"## The Data Deluge\n\nIn the world of modern web development, we often find ourselves dealing with large amounts of data. Whether it's streaming API responses, processing large files, or handling real-time updates, managing data flow efficiently is crucial. Enter async generators - a powerful feature that combines the best of async programming and iterative processing.\n\n## Understanding Async Generators\n\nAt their core, async generators are a fusion of two powerful JavaScript features: async/await and generator functions. They allow you to create functions that can pause execution, yield values asynchronously, and resume when needed.\n\n```javascript\nasync function* numberStream() {\n  for (let i = 0; i \u003C 1000; i++) {\n    // Simulate async operation\n    await new Promise(resolve => setTimeout(resolve, 100));\n    yield i;\n  }\n}\n\n// Using the generator\nconst stream = numberStream();\nfor await (const number of stream) {\n  console.log(number);\n}\n```\n\n## Real-World Applications\n\nLet's look at some practical examples where async generators shine:\n\n### 1. Paginated API Calls\n\n```javascript\nasync function* fetchAllUsers() {\n  let page = 1;\n  while (true) {\n    const response = await fetch(`/api/users?page=${page}`);\n    const data = await response.json();\n    \n    if (data.users.length === 0) break;\n    \n    yield* data.users;\n    page++;\n  }\n}\n\n// Process users one at a time\nfor await (const user of fetchAllUsers()) {\n  await processUser(user);\n}\n```\n\n### 2. Large File Processing\n\n```javascript\nasync function* readFileByChunks(file) {\n  const chunkSize = 64 * 1024; // 64KB chunks\n  const reader = file.stream().getReader();\n  \n  while (true) {\n    const {done, value} = await reader.read();\n    if (done) break;\n    yield value;\n  }\n}\n\n// Process file chunks\nconst file = await fetch('large-file.txt').then(r => r.blob());\nfor await (const chunk of readFileByChunks(file)) {\n  await processChunk(chunk);\n}\n```\n\n### 3. Real-time Data Handling\n\n```javascript\nasync function* webSocketStream(url) {\n  const ws = new WebSocket(url);\n  \n  try {\n    while (true) {\n      const message = await new Promise((resolve, reject) => {\n        ws.onmessage = e => resolve(e.data);\n        ws.onerror = e => reject(e);\n      });\n      yield JSON.parse(message);\n    }\n  } finally {\n    ws.close();\n  }\n}\n\n// Handle real-time updates\nconst stream = webSocketStream('wss://api.example.com/live');\nfor await (const update of stream) {\n  await handleUpdate(update);\n}\n```\n\n## Best Practices and Patterns\n\nWhen working with async generators, keep these principles in mind:\n\n1. **Memory Management**: Yield values as soon as they're available to prevent memory buildup\n2. **Error Handling**: Use try/catch blocks effectively within generator functions\n3. **Resource Cleanup**: Implement proper cleanup in finally blocks\n4. **Backpressure**: Consider implementing backpressure mechanisms for data streams\n\n```javascript\nasync function* withBackpressure(source, processFunc) {\n  for await (const item of source) {\n    await processFunc(item); // Natural backpressure\n    yield item;\n  }\n}\n```\n\n## Performance Considerations\n\nAsync generators are powerful, but they come with some overhead. Here are some tips for optimal performance:\n\n1. **Batch Processing**: Sometimes yielding in batches is more efficient\n```javascript\nasync function* batchProcessor(source, batchSize = 100) {\n  let batch = [];\n  for await (const item of source) {\n    batch.push(item);\n    if (batch.length >= batchSize) {\n      yield batch;\n      batch = [];\n    }\n  }\n  if (batch.length > 0) yield batch;\n}\n```\n\n2. **Caching**: Cache results when appropriate\n3. **Early Termination**: Implement break conditions to stop processing when needed\n\n## The Future of Data Processing\n\nAsync generators represent a paradigm shift in how we handle data streams in JavaScript. They provide a clean, efficient way to process large amounts of data while maintaining control over memory usage and processing speed.\n\nAs we move towards more data-intensive applications, understanding and effectively using async generators becomes increasingly important. They're not just a feature - they're a fundamental tool in the modern developer's arsenal.\n\nRemember: The key to handling large data streams isn't just about processing everything at once, but about maintaining a steady, controlled flow of data. Async generators give us exactly that - a way to tame the data flood, one yield at a time.","src/content/blog/async-generators.md","53630bbf9f726a04",{"html":213,"metadata":214},"\u003Ch2 id=\"the-data-deluge\">The Data Deluge\u003C/h2>\n\u003Cp>In the world of modern web development, we often find ourselves dealing with large amounts of data. Whether it’s streaming API responses, processing large files, or handling real-time updates, managing data flow efficiently is crucial. Enter async generators - a powerful feature that combines the best of async programming and iterative processing.\u003C/p>\n\u003Ch2 id=\"understanding-async-generators\">Understanding Async Generators\u003C/h2>\n\u003Cp>At their core, async generators are a fusion of two powerful JavaScript features: async/await and generator functions. They allow you to create functions that can pause execution, yield values asynchronously, and resume when needed.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> numberStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Simulate async operation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">resolve\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(resolve, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Using the generator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> numberStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> stream) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(number);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"real-world-applications\">Real-World Applications\u003C/h2>\n\u003Cp>Let’s look at some practical examples where async generators shine:\u003C/p>\n\u003Ch3 id=\"1-paginated-api-calls\">1. Paginated API Calls\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchAllUsers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> page \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> response\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/api/users?page=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">page\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> data\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data.users.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data.users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    page\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Process users one at a time\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> user\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchAllUsers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-large-file-processing\">2. Large File Processing\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> readFileByChunks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> chunkSize\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 64\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1024\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// 64KB chunks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> reader\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> file.\u003C/span>\u003Cspan style=\"color:#B392F0\">stream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">getReader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#79B8FF\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> reader.\u003C/span>\u003Cspan style=\"color:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (done) \u003C/span>\u003Cspan style=\"color:#F97583\">break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Process file chunks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> file\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'large-file.txt'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">r\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> r.\u003C/span>\u003Cspan style=\"color:#B392F0\">blob\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> chunk\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#B392F0\"> readFileByChunks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(file)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processChunk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(chunk);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-real-time-data-handling\">3. Real-time Data Handling\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> webSocketStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ws\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> WebSocket\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> message\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">reject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ws.\u003C/span>\u003Cspan style=\"color:#B392F0\">onmessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> e\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e.data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ws.\u003C/span>\u003Cspan style=\"color:#B392F0\">onerror\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> e\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> reject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ws.\u003C/span>\u003Cspan style=\"color:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Handle real-time updates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> webSocketStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'wss://api.example.com/live'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> update\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> stream) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleUpdate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(update);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"best-practices-and-patterns\">Best Practices and Patterns\u003C/h2>\n\u003Cp>When working with async generators, keep these principles in mind:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Memory Management\u003C/strong>: Yield values as soon as they’re available to prevent memory buildup\u003C/li>\n\u003Cli>\u003Cstrong>Error Handling\u003C/strong>: Use try/catch blocks effectively within generator functions\u003C/li>\n\u003Cli>\u003Cstrong>Resource Cleanup\u003C/strong>: Implement proper cleanup in finally blocks\u003C/li>\n\u003Cli>\u003Cstrong>Backpressure\u003C/strong>: Consider implementing backpressure mechanisms for data streams\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> withBackpressure\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">source\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">processFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> item\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> source) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(item); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Natural backpressure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> item;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-considerations\">Performance Considerations\u003C/h2>\n\u003Cp>Async generators are powerful, but they come with some overhead. Here are some tips for optimal performance:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Batch Processing\u003C/strong>: Sometimes yielding in batches is more efficient\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> batchProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">source\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">batchSize\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batch \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> item\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> source) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    batch.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(item);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (batch.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> >=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batchSize) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batch;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      batch \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (batch.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batch;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Caching\u003C/strong>: Cache results when appropriate\u003C/li>\n\u003Cli>\u003Cstrong>Early Termination\u003C/strong>: Implement break conditions to stop processing when needed\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"the-future-of-data-processing\">The Future of Data Processing\u003C/h2>\n\u003Cp>Async generators represent a paradigm shift in how we handle data streams in JavaScript. They provide a clean, efficient way to process large amounts of data while maintaining control over memory usage and processing speed.\u003C/p>\n\u003Cp>As we move towards more data-intensive applications, understanding and effectively using async generators becomes increasingly important. They’re not just a feature - they’re a fundamental tool in the modern developer’s arsenal.\u003C/p>\n\u003Cp>Remember: The key to handling large data streams isn’t just about processing everything at once, but about maintaining a steady, controlled flow of data. Async generators give us exactly that - a way to tame the data flood, one yield at a time.\u003C/p>",{"headings":215,"imagePaths":244,"frontmatter":245},[216,219,222,225,229,232,235,238,241],{"depth":152,"slug":217,"text":218},"the-data-deluge","The Data Deluge",{"depth":152,"slug":220,"text":221},"understanding-async-generators","Understanding Async Generators",{"depth":152,"slug":223,"text":224},"real-world-applications","Real-World Applications",{"depth":226,"slug":227,"text":228},3,"1-paginated-api-calls","1. Paginated API Calls",{"depth":226,"slug":230,"text":231},"2-large-file-processing","2. Large File Processing",{"depth":226,"slug":233,"text":234},"3-real-time-data-handling","3. Real-time Data Handling",{"depth":152,"slug":236,"text":237},"best-practices-and-patterns","Best Practices and Patterns",{"depth":152,"slug":239,"text":240},"performance-considerations","Performance Considerations",{"depth":152,"slug":242,"text":243},"the-future-of-data-processing","The Future of Data Processing",[],{"title":206,"description":207,"publishedAt":246,"tags":247},["Date","2024-09-15T00:00:00.000Z"],[248,249,250,251,252],"javascript","async","generators","streams","performance","async-localstorage",{"id":253,"data":255,"body":259,"filePath":260,"digest":261,"rendered":262},{"title":256,"description":257,"publishedAt":258,"draft":122},"Node.js Logging: The Art of Digital Breadcrumbs","A comprehensive guide to implementing effective logging in Node.js applications",["Date","2024-09-10T00:00:00.000Z"],"## The Importance of Logging\n\nIn the labyrinth of modern applications, logs are our digital breadcrumbs - helping us trace the path of execution, debug issues, and understand system behavior. But like any tool, logging is only as good as its implementation. Let's explore how to master the art of logging in Node.js applications.\n\n## Beyond console.log\n\nWhile `console.log` is great for development, production applications need a more robust logging solution. Let's explore how to build one:\n\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n// Development logging\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n```\n\n## Structured Logging\n\nStructured logging is like organizing your closet - everything has its place and is easy to find:\n\n```javascript\nlogger.info('User action', {\n  userId: '123',\n  action: 'login',\n  timestamp: new Date().toISOString(),\n  metadata: {\n    ip: '192.168.1.1',\n    userAgent: 'Mozilla/5.0...'\n  }\n});\n```\n\n## Log Levels and When to Use Them\n\nThink of log levels as different types of breadcrumbs:\n\n1. **ERROR**: Something's broken and needs immediate attention\n```javascript\ntry {\n  await processPayment(order);\n} catch (error) {\n  logger.error('Payment processing failed', {\n    orderId: order.id,\n    error: error.message,\n    stack: error.stack\n  });\n}\n```\n\n2. **WARN**: Something's not quite right, but the system can handle it\n```javascript\nif (retries > maxRetries) {\n  logger.warn('Max retries reached for operation', {\n    operation: 'fetchUserData',\n    attempts: retries\n  });\n}\n```\n\n3. **INFO**: Notable events in the application's lifecycle\n```javascript\nlogger.info('Server started', {\n  port: process.env.PORT,\n  environment: process.env.NODE_ENV\n});\n```\n\n4. **DEBUG**: Detailed information for debugging\n```javascript\nlogger.debug('Cache miss', {\n  key: cacheKey,\n  timestamp: Date.now()\n});\n```\n\n## Best Practices\n\n### 1. Context is King\n\nAlways include relevant context in your logs:\n\n```javascript\nconst requestLogger = async (ctx, next) => {\n  const start = Date.now();\n  try {\n    await next();\n  } finally {\n    const ms = Date.now() - start;\n    logger.info('Request completed', {\n      method: ctx.method,\n      path: ctx.path,\n      status: ctx.status,\n      duration: `${ms}ms`,\n      requestId: ctx.requestId\n    });\n  }\n};\n```\n\n### 2. Error Handling\n\nProper error logging can save hours of debugging:\n\n```javascript\nclass ApplicationError extends Error {\n  constructor(message, context = {}) {\n    super(message);\n    this.name = this.constructor.name;\n    this.context = context;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\ntry {\n  throw new ApplicationError('Invalid input', {\n    userId: '123',\n    inputData: data\n  });\n} catch (error) {\n  logger.error('Operation failed', {\n    error: {\n      message: error.message,\n      name: error.name,\n      context: error.context,\n      stack: error.stack\n    }\n  });\n}\n```\n\n### 3. Performance Monitoring\n\nUse logs to track performance metrics:\n\n```javascript\nconst performanceLogger = async (ctx, next) => {\n  const start = process.hrtime();\n  \n  try {\n    await next();\n  } finally {\n    const [seconds, nanoseconds] = process.hrtime(start);\n    const duration = seconds * 1000 + nanoseconds / 1000000;\n    \n    logger.info('Performance metric', {\n      endpoint: ctx.path,\n      method: ctx.method,\n      duration: `${duration.toFixed(2)}ms`,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n```\n\n## Log Management and Analysis\n\nCollecting logs is only half the battle. Here's how to make them useful:\n\n1. **Centralized Logging**\n```javascript\nconst winston = require('winston');\nrequire('winston-elasticsearch');\n\nconst esTransport = new winston.transports.Elasticsearch({\n  level: 'info',\n  clientOpts: { node: 'http://localhost:9200' },\n  indexPrefix: 'logs'\n});\n\nlogger.add(esTransport);\n```\n\n2. **Log Rotation**\n```javascript\nconst { createLogger, transports } = require('winston');\nrequire('winston-daily-rotate-file');\n\nconst fileRotateTransport = new transports.DailyRotateFile({\n  filename: 'logs/app-%DATE%.log',\n  datePattern: 'YYYY-MM-DD',\n  maxSize: '20m',\n  maxFiles: '14d'\n});\n\nconst logger = createLogger({\n  transports: [fileRotateTransport]\n});\n```\n\n## Security Considerations\n\nRemember to protect sensitive information in your logs:\n\n```javascript\nconst sanitizeUser = (user) => ({\n  id: user.id,\n  username: user.username,\n  // Exclude password, email, etc.\n});\n\nlogger.info('User profile updated', {\n  user: sanitizeUser(user),\n  changes: sanitizeChanges(changes)\n});\n```\n\n## Conclusion\n\nEffective logging is an art that balances detail with clarity, performance with thoroughness. By following these practices, you'll create logs that are not just records of what happened, but valuable tools for understanding and improving your application.\n\nRemember: Good logs are like good documentation - they tell a story. Make sure your logs tell the story you need to hear when things go wrong.","src/content/blog/async-localstorage.md","bb2a381e768fca70",{"html":263,"metadata":264},"\u003Ch2 id=\"the-importance-of-logging\">The Importance of Logging\u003C/h2>\n\u003Cp>In the labyrinth of modern applications, logs are our digital breadcrumbs - helping us trace the path of execution, debug issues, and understand system behavior. But like any tool, logging is only as good as its implementation. Let’s explore how to master the art of logging in Node.js applications.\u003C/p>\n\u003Ch2 id=\"beyond-consolelog\">Beyond console.log\u003C/h2>\n\u003Cp>While \u003Ccode>console.log\u003C/code> is great for development, production applications need a more robust logging solution. Let’s explore how to build one:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> winston\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> logger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.\u003C/span>\u003Cspan style=\"color:#B392F0\">createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  level: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">LOG_LEVEL\u003C/span>\u003Cspan style=\"color:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'info'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  format: winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">combine\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">timestamp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  transports: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error.log'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'combined.log'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Development logging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">NODE_ENV\u003C/span>\u003Cspan style=\"color:#F97583\"> !==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'production'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">Console\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    format: winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">simple\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"structured-logging\">Structured Logging\u003C/h2>\n\u003Cp>Structured logging is like organizing your closet - everything has its place and is easy to find:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'User action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  userId: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  action: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'login'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  timestamp: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">toISOString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  metadata: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ip: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'192.168.1.1'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    userAgent: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Mozilla/5.0...'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"log-levels-and-when-to-use-them\">Log Levels and When to Use Them\u003C/h2>\n\u003Cp>Think of log levels as different types of breadcrumbs:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>ERROR\u003C/strong>: Something’s broken and needs immediate attention\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processPayment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(order);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Payment processing failed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    orderId: order.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    error: error.message,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    stack: error.stack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>WARN\u003C/strong>: Something’s not quite right, but the system can handle it\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (retries \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> maxRetries) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Max retries reached for operation'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    operation: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'fetchUserData'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    attempts: retries\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>\u003Cstrong>INFO\u003C/strong>: Notable events in the application’s lifecycle\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Server started'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  port: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PORT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  environment: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">NODE_ENV\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"4\">\n\u003Cli>\u003Cstrong>DEBUG\u003C/strong>: Detailed information for debugging\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">debug\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Cache miss'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  key: cacheKey,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  timestamp: Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Ch3 id=\"1-context-is-king\">1. Context is King\u003C/h3>\n\u003Cp>Always include relevant context in your logs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> requestLogger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">ctx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> start\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ms\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Request completed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      method: ctx.method,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      path: ctx.path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      status: ctx.status,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ms\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}ms`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      requestId: ctx.requestId\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-error-handling\">2. Error Handling\u003C/h3>\n\u003Cp>Proper error logging can save hours of debugging:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> ApplicationError\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">context\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.context \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> context;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Error.\u003C/span>\u003Cspan style=\"color:#B392F0\">captureStackTrace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> ApplicationError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid input'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    userId: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    inputData: data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Operation failed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    error: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      message: error.message,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      name: error.name,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      context: error.context,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      stack: error.stack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-performance-monitoring\">3. Performance Monitoring\u003C/h3>\n\u003Cp>Use logs to track performance metrics:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> performanceLogger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">ctx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> start\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process.\u003C/span>\u003Cspan style=\"color:#B392F0\">hrtime\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">seconds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">nanoseconds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process.\u003C/span>\u003Cspan style=\"color:#B392F0\">hrtime\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(start);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> duration\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> seconds \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nanoseconds \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Performance metric'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      endpoint: ctx.path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      method: ctx.method,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">duration\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">toFixed\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}ms`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      timestamp: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">toISOString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"log-management-and-analysis\">Log Management and Analysis\u003C/h2>\n\u003Cp>Collecting logs is only half the battle. Here’s how to make them useful:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Centralized Logging\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> winston\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston-elasticsearch'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> esTransport\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">Elasticsearch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'info'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  clientOpts: { node: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'http://localhost:9200'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  indexPrefix: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'logs'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(esTransport);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Log Rotation\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">transports\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston-daily-rotate-file'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> fileRotateTransport\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">DailyRotateFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'logs/app-%DATE%.log'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  datePattern: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'YYYY-MM-DD'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  maxSize: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'20m'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  maxFiles: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'14d'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> logger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  transports: [fileRotateTransport]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"security-considerations\">Security Considerations\u003C/h2>\n\u003Cp>Remember to protect sensitive information in your logs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> sanitizeUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">user\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  id: user.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  username: user.username,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Exclude password, email, etc.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'User profile updated'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  user: \u003C/span>\u003Cspan style=\"color:#B392F0\">sanitizeUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  changes: \u003C/span>\u003Cspan style=\"color:#B392F0\">sanitizeChanges\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(changes)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Effective logging is an art that balances detail with clarity, performance with thoroughness. By following these practices, you’ll create logs that are not just records of what happened, but valuable tools for understanding and improving your application.\u003C/p>\n\u003Cp>Remember: Good logs are like good documentation - they tell a story. Make sure your logs tell the story you need to hear when things go wrong.\u003C/p>",{"headings":265,"imagePaths":299,"frontmatter":300},[266,269,272,275,278,281,284,287,290,293,296],{"depth":152,"slug":267,"text":268},"the-importance-of-logging","The Importance of Logging",{"depth":152,"slug":270,"text":271},"beyond-consolelog","Beyond console.log",{"depth":152,"slug":273,"text":274},"structured-logging","Structured Logging",{"depth":152,"slug":276,"text":277},"log-levels-and-when-to-use-them","Log Levels and When to Use Them",{"depth":152,"slug":279,"text":280},"best-practices","Best Practices",{"depth":226,"slug":282,"text":283},"1-context-is-king","1. Context is King",{"depth":226,"slug":285,"text":286},"2-error-handling","2. Error Handling",{"depth":226,"slug":288,"text":289},"3-performance-monitoring","3. Performance Monitoring",{"depth":152,"slug":291,"text":292},"log-management-and-analysis","Log Management and Analysis",{"depth":152,"slug":294,"text":295},"security-considerations","Security Considerations",{"depth":152,"slug":297,"text":298},"conclusion","Conclusion",[],{"title":256,"description":257,"publishedAt":301,"tags":302},["Date","2024-09-10T00:00:00.000Z"],[303,304,305,306,279],"nodejs","logging","debugging","monitoring","notes",["Map",309,310,329,330,352,353],"git-workflow",{"id":309,"data":311,"body":316,"filePath":317,"digest":318,"rendered":319},{"title":312,"description":313,"publishedAt":314,"category":315,"draft":122},"Git Workflow Best Practices","Essential git commands and workflows for efficient development",["Date","2024-01-10T00:00:00.000Z"],"Development","Quick reference for common git workflows:\n\n## Feature Branch Workflow\n\n1. Create feature branch:\n```bash\ngit checkout -b feature/new-feature\n```\n\n2. Regular commits with conventional commit messages:\n```bash\ngit commit -m \"feat: add new feature\"\ngit commit -m \"fix: address review feedback\"\n```\n\n3. Rebase before merging:\n```bash\ngit fetch origin main\ngit rebase origin/main\n```","src/content/notes/git-workflow.md","31da03317fc15c5e",{"html":320,"metadata":321},"\u003Cp>Quick reference for common git workflows:\u003C/p>\n\u003Ch2 id=\"feature-branch-workflow\">Feature Branch Workflow\u003C/h2>\n\u003Col>\n\u003Cli>Create feature branch:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> checkout\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -b\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> feature/new-feature\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>Regular commits with conventional commit messages:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> commit\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -m\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"feat: add new feature\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> commit\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -m\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"fix: address review feedback\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>Rebase before merging:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> fetch\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> origin\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> rebase\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> origin/main\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":322,"imagePaths":326,"frontmatter":327},[323],{"depth":152,"slug":324,"text":325},"feature-branch-workflow","Feature Branch Workflow",[],{"title":312,"description":313,"publishedAt":328,"category":315},["Date","2024-01-10T00:00:00.000Z"],"css-tricks",{"id":329,"data":331,"body":336,"filePath":337,"digest":338,"rendered":339},{"title":332,"description":333,"publishedAt":334,"category":335,"draft":122},"Modern CSS Tricks","Useful CSS snippets and modern techniques",["Date","2024-01-05T00:00:00.000Z"],"CSS","Some modern CSS tricks I use frequently:\n\n## Container Queries\n\n```css\n.card-container {\n  container-type: inline-size;\n}\n\n@container (min-width: 400px) {\n  .card {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n  }\n}\n```\n\n## Custom Properties with Fallbacks\n\n```css\n.element {\n  background: var(--custom-bg, #ffffff);\n  color: var(--custom-color, var(--fallback-color, #000000));\n}\n```","src/content/notes/css-tricks.md","5dea75d666190048",{"html":340,"metadata":341},"\u003Cp>Some modern CSS tricks I use frequently:\u003C/p>\n\u003Ch2 id=\"container-queries\">Container Queries\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.card-container\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  container-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: inline-size;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@container\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (min-width: 400px) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  .card\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">grid\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    grid-template-columns\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"custom-properties-with-fallbacks\">Custom Properties with Fallbacks\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.element\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--custom-bg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">#ffffff\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  color\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--custom-color\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--fallback-color\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">#000000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":342,"imagePaths":349,"frontmatter":350},[343,346],{"depth":152,"slug":344,"text":345},"container-queries","Container Queries",{"depth":152,"slug":347,"text":348},"custom-properties-with-fallbacks","Custom Properties with Fallbacks",[],{"title":332,"description":333,"publishedAt":351,"category":335},["Date","2024-01-05T00:00:00.000Z"],"typescript-patterns",{"id":352,"data":354,"body":358,"filePath":359,"digest":360,"rendered":361},{"title":355,"description":356,"publishedAt":357,"category":36,"draft":122},"Advanced TypeScript Patterns","A collection of useful TypeScript patterns and when to use them",["Date","2024-01-15T00:00:00.000Z"],"Here are some TypeScript patterns I've found particularly useful:\n\n## Type Predicates\n\nType predicates are functions that narrow down types:\n\n```typescript\nfunction isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n```\n\n## Discriminated Unions\n\nPerfect for handling different states:\n\n```typescript\ntype State = \n  | { status: 'idle' }\n  | { status: 'loading' }\n  | { status: 'success', data: string }\n  | { status: 'error', error: Error }\n```","src/content/notes/typescript-patterns.md","46cb32ee0f2798e5",{"html":362,"metadata":363},"\u003Cp>Here are some TypeScript patterns I’ve found particularly useful:\u003C/p>\n\u003Ch2 id=\"type-predicates\">Type Predicates\u003C/h2>\n\u003Cp>Type predicates are functions that narrow down types:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> isError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#F97583\"> is\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"discriminated-unions\">Discriminated Unions\u003C/h2>\n\u003Cp>Perfect for handling different states:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> State\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'idle'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'loading'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'success'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":364,"imagePaths":371,"frontmatter":372},[365,368],{"depth":152,"slug":366,"text":367},"type-predicates","Type Predicates",{"depth":152,"slug":369,"text":370},"discriminated-unions","Discriminated Unions",[],{"title":355,"description":356,"publishedAt":373,"category":36},["Date","2024-01-15T00:00:00.000Z"],"site",["Map",376,377],"home",{"id":376,"data":378,"filePath":399},{"name":379,"title":380,"introduction":381,"sections":382,"socialLinks":392},"Suraj Goswami","Software Developer","I'm a Full Stack Developer specializing in building scalable web applications with React, Node.js and cloud platforms. I focus on creating efficient, user-centric solutions while continuously expanding my technical skills.",{"blog":383,"projects":386,"experience":389},{"title":384,"viewAllText":385},"Writing","View all posts",{"title":387,"viewAllText":388},"Projects","View all projects",{"title":390,"viewAllText":391},"Experience","View full résumé",[393,396],{"platform":394,"url":395},"GitHub","https://github.com/surajG20",{"platform":397,"url":398},"Linkedin","https://www.linkedin.com/in/suraj-goswami01","src/content/site/config.json"]