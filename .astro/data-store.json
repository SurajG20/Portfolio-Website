[["Map",1,2,9,10,181,182,221,222,260,261,316,317,367,368],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.2","content-config-digest","73c66b437e2e5011","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{\"js\":\"javascript\",\"ts\":\"typescript\",\"bash\":\"shellscript\",\"sh\":\"shellscript\",\"shell\":\"shellscript\",\"zsh\":\"shellscript\"},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,63,64,117,118,145,146],"async-generators",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21},{"title":14,"description":15,"publishedAt":16,"draft":17},"Async Generators in JavaScript: Taming the Data Flood","A deep dive into using async generators for handling large data streams efficiently",["Date","2024-09-15T00:00:00.000Z"],false,"## The Data Deluge\n\nIn the world of modern web development, we often find ourselves dealing with large amounts of data. Whether it's streaming API responses, processing large files, or handling real-time updates, managing data flow efficiently is crucial. Enter async generators - a powerful feature that combines the best of async programming and iterative processing.\n\n## Understanding Async Generators\n\nAt their core, async generators are a fusion of two powerful JavaScript features: async/await and generator functions. They allow you to create functions that can pause execution, yield values asynchronously, and resume when needed.\n\n```javascript\nasync function* numberStream() {\n  for (let i = 0; i \u003C 1000; i++) {\n    // Simulate async operation\n    await new Promise(resolve => setTimeout(resolve, 100));\n    yield i;\n  }\n}\n\n// Using the generator\nconst stream = numberStream();\nfor await (const number of stream) {\n  console.log(number);\n}\n```\n\n## Real-World Applications\n\nLet's look at some practical examples where async generators shine:\n\n### 1. Paginated API Calls\n\n```javascript\nasync function* fetchAllUsers() {\n  let page = 1;\n  while (true) {\n    const response = await fetch(`/api/users?page=${page}`);\n    const data = await response.json();\n    \n    if (data.users.length === 0) break;\n    \n    yield* data.users;\n    page++;\n  }\n}\n\n// Process users one at a time\nfor await (const user of fetchAllUsers()) {\n  await processUser(user);\n}\n```\n\n### 2. Large File Processing\n\n```javascript\nasync function* readFileByChunks(file) {\n  const chunkSize = 64 * 1024; // 64KB chunks\n  const reader = file.stream().getReader();\n  \n  while (true) {\n    const {done, value} = await reader.read();\n    if (done) break;\n    yield value;\n  }\n}\n\n// Process file chunks\nconst file = await fetch('large-file.txt').then(r => r.blob());\nfor await (const chunk of readFileByChunks(file)) {\n  await processChunk(chunk);\n}\n```\n\n### 3. Real-time Data Handling\n\n```javascript\nasync function* webSocketStream(url) {\n  const ws = new WebSocket(url);\n  \n  try {\n    while (true) {\n      const message = await new Promise((resolve, reject) => {\n        ws.onmessage = e => resolve(e.data);\n        ws.onerror = e => reject(e);\n      });\n      yield JSON.parse(message);\n    }\n  } finally {\n    ws.close();\n  }\n}\n\n// Handle real-time updates\nconst stream = webSocketStream('wss://api.example.com/live');\nfor await (const update of stream) {\n  await handleUpdate(update);\n}\n```\n\n## Best Practices and Patterns\n\nWhen working with async generators, keep these principles in mind:\n\n1. **Memory Management**: Yield values as soon as they're available to prevent memory buildup\n2. **Error Handling**: Use try/catch blocks effectively within generator functions\n3. **Resource Cleanup**: Implement proper cleanup in finally blocks\n4. **Backpressure**: Consider implementing backpressure mechanisms for data streams\n\n```javascript\nasync function* withBackpressure(source, processFunc) {\n  for await (const item of source) {\n    await processFunc(item); // Natural backpressure\n    yield item;\n  }\n}\n```\n\n## Performance Considerations\n\nAsync generators are powerful, but they come with some overhead. Here are some tips for optimal performance:\n\n1. **Batch Processing**: Sometimes yielding in batches is more efficient\n```javascript\nasync function* batchProcessor(source, batchSize = 100) {\n  let batch = [];\n  for await (const item of source) {\n    batch.push(item);\n    if (batch.length >= batchSize) {\n      yield batch;\n      batch = [];\n    }\n  }\n  if (batch.length > 0) yield batch;\n}\n```\n\n2. **Caching**: Cache results when appropriate\n3. **Early Termination**: Implement break conditions to stop processing when needed\n\n## The Future of Data Processing\n\nAsync generators represent a paradigm shift in how we handle data streams in JavaScript. They provide a clean, efficient way to process large amounts of data while maintaining control over memory usage and processing speed.\n\nAs we move towards more data-intensive applications, understanding and effectively using async generators becomes increasingly important. They're not just a feature - they're a fundamental tool in the modern developer's arsenal.\n\nRemember: The key to handling large data streams isn't just about processing everything at once, but about maintaining a steady, controlled flow of data. Async generators give us exactly that - a way to tame the data flood, one yield at a time.","src/content/blog/async-generators.md","53630bbf9f726a04",{"html":22,"metadata":23},"\u003Ch2 id=\"the-data-deluge\">The Data Deluge\u003C/h2>\n\u003Cp>In the world of modern web development, we often find ourselves dealing with large amounts of data. Whether it’s streaming API responses, processing large files, or handling real-time updates, managing data flow efficiently is crucial. Enter async generators - a powerful feature that combines the best of async programming and iterative processing.\u003C/p>\n\u003Ch2 id=\"understanding-async-generators\">Understanding Async Generators\u003C/h2>\n\u003Cp>At their core, async generators are a fusion of two powerful JavaScript features: async/await and generator functions. They allow you to create functions that can pause execution, yield values asynchronously, and resume when needed.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> numberStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Simulate async operation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">resolve\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(resolve, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Using the generator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> numberStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> stream) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(number);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"real-world-applications\">Real-World Applications\u003C/h2>\n\u003Cp>Let’s look at some practical examples where async generators shine:\u003C/p>\n\u003Ch3 id=\"1-paginated-api-calls\">1. Paginated API Calls\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchAllUsers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> page \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> response\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/api/users?page=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">page\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> data\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data.users.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data.users;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    page\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Process users one at a time\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> user\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchAllUsers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-large-file-processing\">2. Large File Processing\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> readFileByChunks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> chunkSize\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 64\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1024\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// 64KB chunks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> reader\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> file.\u003C/span>\u003Cspan style=\"color:#B392F0\">stream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">getReader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#79B8FF\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> reader.\u003C/span>\u003Cspan style=\"color:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (done) \u003C/span>\u003Cspan style=\"color:#F97583\">break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Process file chunks\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> file\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'large-file.txt'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">r\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> r.\u003C/span>\u003Cspan style=\"color:#B392F0\">blob\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> chunk\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#B392F0\"> readFileByChunks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(file)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processChunk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(chunk);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-real-time-data-handling\">3. Real-time Data Handling\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> webSocketStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ws\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> WebSocket\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> message\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">reject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ws.\u003C/span>\u003Cspan style=\"color:#B392F0\">onmessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> e\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e.data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ws.\u003C/span>\u003Cspan style=\"color:#B392F0\">onerror\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> e\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> reject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ws.\u003C/span>\u003Cspan style=\"color:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Handle real-time updates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> webSocketStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'wss://api.example.com/live'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> update\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> stream) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleUpdate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(update);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"best-practices-and-patterns\">Best Practices and Patterns\u003C/h2>\n\u003Cp>When working with async generators, keep these principles in mind:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Memory Management\u003C/strong>: Yield values as soon as they’re available to prevent memory buildup\u003C/li>\n\u003Cli>\u003Cstrong>Error Handling\u003C/strong>: Use try/catch blocks effectively within generator functions\u003C/li>\n\u003Cli>\u003Cstrong>Resource Cleanup\u003C/strong>: Implement proper cleanup in finally blocks\u003C/li>\n\u003Cli>\u003Cstrong>Backpressure\u003C/strong>: Consider implementing backpressure mechanisms for data streams\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> withBackpressure\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">source\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">processFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> item\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> source) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processFunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(item); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Natural backpressure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> item;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-considerations\">Performance Considerations\u003C/h2>\n\u003Cp>Async generators are powerful, but they come with some overhead. Here are some tips for optimal performance:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Batch Processing\u003C/strong>: Sometimes yielding in batches is more efficient\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> batchProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">source\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">batchSize\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batch \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> item\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> source) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    batch.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(item);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (batch.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> >=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batchSize) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batch;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      batch \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (batch.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> batch;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Caching\u003C/strong>: Cache results when appropriate\u003C/li>\n\u003Cli>\u003Cstrong>Early Termination\u003C/strong>: Implement break conditions to stop processing when needed\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"the-future-of-data-processing\">The Future of Data Processing\u003C/h2>\n\u003Cp>Async generators represent a paradigm shift in how we handle data streams in JavaScript. They provide a clean, efficient way to process large amounts of data while maintaining control over memory usage and processing speed.\u003C/p>\n\u003Cp>As we move towards more data-intensive applications, understanding and effectively using async generators becomes increasingly important. They’re not just a feature - they’re a fundamental tool in the modern developer’s arsenal.\u003C/p>\n\u003Cp>Remember: The key to handling large data streams isn’t just about processing everything at once, but about maintaining a steady, controlled flow of data. Async generators give us exactly that - a way to tame the data flood, one yield at a time.\u003C/p>",{"headings":24,"imagePaths":54,"frontmatter":55},[25,29,32,35,39,42,45,48,51],{"depth":26,"slug":27,"text":28},2,"the-data-deluge","The Data Deluge",{"depth":26,"slug":30,"text":31},"understanding-async-generators","Understanding Async Generators",{"depth":26,"slug":33,"text":34},"real-world-applications","Real-World Applications",{"depth":36,"slug":37,"text":38},3,"1-paginated-api-calls","1. Paginated API Calls",{"depth":36,"slug":40,"text":41},"2-large-file-processing","2. Large File Processing",{"depth":36,"slug":43,"text":44},"3-real-time-data-handling","3. Real-time Data Handling",{"depth":26,"slug":46,"text":47},"best-practices-and-patterns","Best Practices and Patterns",{"depth":26,"slug":49,"text":50},"performance-considerations","Performance Considerations",{"depth":26,"slug":52,"text":53},"the-future-of-data-processing","The Future of Data Processing",[],{"title":14,"description":15,"publishedAt":56,"tags":57},["Date","2024-09-15T00:00:00.000Z"],[58,59,60,61,62],"javascript","async","generators","streams","performance","async-localstorage",{"id":63,"data":65,"body":69,"filePath":70,"digest":71,"rendered":72},{"title":66,"description":67,"publishedAt":68,"draft":17},"Node.js Logging: The Art of Digital Breadcrumbs","A comprehensive guide to implementing effective logging in Node.js applications",["Date","2024-09-10T00:00:00.000Z"],"## The Importance of Logging\n\nIn the labyrinth of modern applications, logs are our digital breadcrumbs - helping us trace the path of execution, debug issues, and understand system behavior. But like any tool, logging is only as good as its implementation. Let's explore how to master the art of logging in Node.js applications.\n\n## Beyond console.log\n\nWhile `console.log` is great for development, production applications need a more robust logging solution. Let's explore how to build one:\n\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n// Development logging\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n```\n\n## Structured Logging\n\nStructured logging is like organizing your closet - everything has its place and is easy to find:\n\n```javascript\nlogger.info('User action', {\n  userId: '123',\n  action: 'login',\n  timestamp: new Date().toISOString(),\n  metadata: {\n    ip: '192.168.1.1',\n    userAgent: 'Mozilla/5.0...'\n  }\n});\n```\n\n## Log Levels and When to Use Them\n\nThink of log levels as different types of breadcrumbs:\n\n1. **ERROR**: Something's broken and needs immediate attention\n```javascript\ntry {\n  await processPayment(order);\n} catch (error) {\n  logger.error('Payment processing failed', {\n    orderId: order.id,\n    error: error.message,\n    stack: error.stack\n  });\n}\n```\n\n2. **WARN**: Something's not quite right, but the system can handle it\n```javascript\nif (retries > maxRetries) {\n  logger.warn('Max retries reached for operation', {\n    operation: 'fetchUserData',\n    attempts: retries\n  });\n}\n```\n\n3. **INFO**: Notable events in the application's lifecycle\n```javascript\nlogger.info('Server started', {\n  port: process.env.PORT,\n  environment: process.env.NODE_ENV\n});\n```\n\n4. **DEBUG**: Detailed information for debugging\n```javascript\nlogger.debug('Cache miss', {\n  key: cacheKey,\n  timestamp: Date.now()\n});\n```\n\n## Best Practices\n\n### 1. Context is King\n\nAlways include relevant context in your logs:\n\n```javascript\nconst requestLogger = async (ctx, next) => {\n  const start = Date.now();\n  try {\n    await next();\n  } finally {\n    const ms = Date.now() - start;\n    logger.info('Request completed', {\n      method: ctx.method,\n      path: ctx.path,\n      status: ctx.status,\n      duration: `${ms}ms`,\n      requestId: ctx.requestId\n    });\n  }\n};\n```\n\n### 2. Error Handling\n\nProper error logging can save hours of debugging:\n\n```javascript\nclass ApplicationError extends Error {\n  constructor(message, context = {}) {\n    super(message);\n    this.name = this.constructor.name;\n    this.context = context;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\ntry {\n  throw new ApplicationError('Invalid input', {\n    userId: '123',\n    inputData: data\n  });\n} catch (error) {\n  logger.error('Operation failed', {\n    error: {\n      message: error.message,\n      name: error.name,\n      context: error.context,\n      stack: error.stack\n    }\n  });\n}\n```\n\n### 3. Performance Monitoring\n\nUse logs to track performance metrics:\n\n```javascript\nconst performanceLogger = async (ctx, next) => {\n  const start = process.hrtime();\n  \n  try {\n    await next();\n  } finally {\n    const [seconds, nanoseconds] = process.hrtime(start);\n    const duration = seconds * 1000 + nanoseconds / 1000000;\n    \n    logger.info('Performance metric', {\n      endpoint: ctx.path,\n      method: ctx.method,\n      duration: `${duration.toFixed(2)}ms`,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n```\n\n## Log Management and Analysis\n\nCollecting logs is only half the battle. Here's how to make them useful:\n\n1. **Centralized Logging**\n```javascript\nconst winston = require('winston');\nrequire('winston-elasticsearch');\n\nconst esTransport = new winston.transports.Elasticsearch({\n  level: 'info',\n  clientOpts: { node: 'http://localhost:9200' },\n  indexPrefix: 'logs'\n});\n\nlogger.add(esTransport);\n```\n\n2. **Log Rotation**\n```javascript\nconst { createLogger, transports } = require('winston');\nrequire('winston-daily-rotate-file');\n\nconst fileRotateTransport = new transports.DailyRotateFile({\n  filename: 'logs/app-%DATE%.log',\n  datePattern: 'YYYY-MM-DD',\n  maxSize: '20m',\n  maxFiles: '14d'\n});\n\nconst logger = createLogger({\n  transports: [fileRotateTransport]\n});\n```\n\n## Security Considerations\n\nRemember to protect sensitive information in your logs:\n\n```javascript\nconst sanitizeUser = (user) => ({\n  id: user.id,\n  username: user.username,\n  // Exclude password, email, etc.\n});\n\nlogger.info('User profile updated', {\n  user: sanitizeUser(user),\n  changes: sanitizeChanges(changes)\n});\n```\n\n## Conclusion\n\nEffective logging is an art that balances detail with clarity, performance with thoroughness. By following these practices, you'll create logs that are not just records of what happened, but valuable tools for understanding and improving your application.\n\nRemember: Good logs are like good documentation - they tell a story. Make sure your logs tell the story you need to hear when things go wrong.","src/content/blog/async-localstorage.md","bb2a381e768fca70",{"html":73,"metadata":74},"\u003Ch2 id=\"the-importance-of-logging\">The Importance of Logging\u003C/h2>\n\u003Cp>In the labyrinth of modern applications, logs are our digital breadcrumbs - helping us trace the path of execution, debug issues, and understand system behavior. But like any tool, logging is only as good as its implementation. Let’s explore how to master the art of logging in Node.js applications.\u003C/p>\n\u003Ch2 id=\"beyond-consolelog\">Beyond console.log\u003C/h2>\n\u003Cp>While \u003Ccode>console.log\u003C/code> is great for development, production applications need a more robust logging solution. Let’s explore how to build one:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> winston\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> logger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.\u003C/span>\u003Cspan style=\"color:#B392F0\">createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  level: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">LOG_LEVEL\u003C/span>\u003Cspan style=\"color:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'info'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  format: winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">combine\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">timestamp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  transports: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error.log'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'combined.log'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Development logging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">NODE_ENV\u003C/span>\u003Cspan style=\"color:#F97583\"> !==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'production'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">Console\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    format: winston.format.\u003C/span>\u003Cspan style=\"color:#B392F0\">simple\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"structured-logging\">Structured Logging\u003C/h2>\n\u003Cp>Structured logging is like organizing your closet - everything has its place and is easy to find:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'User action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  userId: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  action: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'login'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  timestamp: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">toISOString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  metadata: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ip: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'192.168.1.1'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    userAgent: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Mozilla/5.0...'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"log-levels-and-when-to-use-them\">Log Levels and When to Use Them\u003C/h2>\n\u003Cp>Think of log levels as different types of breadcrumbs:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>ERROR\u003C/strong>: Something’s broken and needs immediate attention\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> processPayment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(order);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Payment processing failed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    orderId: order.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    error: error.message,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    stack: error.stack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>WARN\u003C/strong>: Something’s not quite right, but the system can handle it\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (retries \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> maxRetries) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Max retries reached for operation'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    operation: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'fetchUserData'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    attempts: retries\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>\u003Cstrong>INFO\u003C/strong>: Notable events in the application’s lifecycle\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Server started'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  port: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PORT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  environment: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">NODE_ENV\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"4\">\n\u003Cli>\u003Cstrong>DEBUG\u003C/strong>: Detailed information for debugging\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">debug\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Cache miss'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  key: cacheKey,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  timestamp: Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Ch3 id=\"1-context-is-king\">1. Context is King\u003C/h3>\n\u003Cp>Always include relevant context in your logs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> requestLogger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">ctx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> start\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ms\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Request completed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      method: ctx.method,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      path: ctx.path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      status: ctx.status,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ms\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}ms`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      requestId: ctx.requestId\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-error-handling\">2. Error Handling\u003C/h3>\n\u003Cp>Proper error logging can save hours of debugging:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> ApplicationError\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">context\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.context \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> context;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Error.\u003C/span>\u003Cspan style=\"color:#B392F0\">captureStackTrace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> ApplicationError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid input'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    userId: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    inputData: data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Operation failed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    error: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      message: error.message,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      name: error.name,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      context: error.context,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      stack: error.stack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-performance-monitoring\">3. Performance Monitoring\u003C/h3>\n\u003Cp>Use logs to track performance metrics:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> performanceLogger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">ctx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> start\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process.\u003C/span>\u003Cspan style=\"color:#B392F0\">hrtime\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">seconds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">nanoseconds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process.\u003C/span>\u003Cspan style=\"color:#B392F0\">hrtime\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(start);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> duration\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> seconds \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nanoseconds \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Performance metric'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      endpoint: ctx.path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      method: ctx.method,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">duration\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">toFixed\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}ms`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      timestamp: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">toISOString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"log-management-and-analysis\">Log Management and Analysis\u003C/h2>\n\u003Cp>Collecting logs is only half the battle. Here’s how to make them useful:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Centralized Logging\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> winston\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston-elasticsearch'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> esTransport\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">Elasticsearch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'info'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  clientOpts: { node: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'http://localhost:9200'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  indexPrefix: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'logs'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(esTransport);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Log Rotation\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">transports\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'winston-daily-rotate-file'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> fileRotateTransport\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">DailyRotateFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'logs/app-%DATE%.log'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  datePattern: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'YYYY-MM-DD'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  maxSize: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'20m'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  maxFiles: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'14d'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> logger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  transports: [fileRotateTransport]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"security-considerations\">Security Considerations\u003C/h2>\n\u003Cp>Remember to protect sensitive information in your logs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> sanitizeUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">user\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  id: user.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  username: user.username,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Exclude password, email, etc.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'User profile updated'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  user: \u003C/span>\u003Cspan style=\"color:#B392F0\">sanitizeUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  changes: \u003C/span>\u003Cspan style=\"color:#B392F0\">sanitizeChanges\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(changes)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Effective logging is an art that balances detail with clarity, performance with thoroughness. By following these practices, you’ll create logs that are not just records of what happened, but valuable tools for understanding and improving your application.\u003C/p>\n\u003Cp>Remember: Good logs are like good documentation - they tell a story. Make sure your logs tell the story you need to hear when things go wrong.\u003C/p>",{"headings":75,"imagePaths":109,"frontmatter":110},[76,79,82,85,88,91,94,97,100,103,106],{"depth":26,"slug":77,"text":78},"the-importance-of-logging","The Importance of Logging",{"depth":26,"slug":80,"text":81},"beyond-consolelog","Beyond console.log",{"depth":26,"slug":83,"text":84},"structured-logging","Structured Logging",{"depth":26,"slug":86,"text":87},"log-levels-and-when-to-use-them","Log Levels and When to Use Them",{"depth":26,"slug":89,"text":90},"best-practices","Best Practices",{"depth":36,"slug":92,"text":93},"1-context-is-king","1. Context is King",{"depth":36,"slug":95,"text":96},"2-error-handling","2. Error Handling",{"depth":36,"slug":98,"text":99},"3-performance-monitoring","3. Performance Monitoring",{"depth":26,"slug":101,"text":102},"log-management-and-analysis","Log Management and Analysis",{"depth":26,"slug":104,"text":105},"security-considerations","Security Considerations",{"depth":26,"slug":107,"text":108},"conclusion","Conclusion",[],{"title":66,"description":67,"publishedAt":111,"tags":112},["Date","2024-09-10T00:00:00.000Z"],[113,114,115,116,89],"nodejs","logging","debugging","monitoring","building-a-modern-portfolio",{"id":117,"data":119,"body":123,"filePath":124,"digest":125,"rendered":126},{"title":120,"description":121,"publishedAt":122,"draft":17},"Building a Modern Portfolio Website with Astro","A deep dive into creating a fast, modern portfolio website using Astro, focusing on performance and developer experience.",["Date","2023-12-15T00:00:00.000Z"],"Building a modern portfolio website requires careful consideration of performance, user experience, and maintainability. In this post, I'll share my experience building this website using Astro, a modern static site generator that offers excellent performance out of the box.\n\n## Why Astro?\n\nAstro has become my go-to choice for static websites due to its unique approach to JavaScript - it ships zero JavaScript by default unless explicitly needed. This results in incredibly fast page loads and excellent performance scores.\n\n## Key Features\n\n1. **Zero JavaScript by Default**: Pages load incredibly fast with minimal JavaScript\n2. **Content Collections**: Markdown-based content management with type safety\n3. **View Transitions**: Smooth page transitions for a native app-like feel\n4. **Excellent DX**: TypeScript support and great developer tooling\n\n## Performance Optimizations\n\nThe site achieves perfect Lighthouse scores through several optimizations:\n- Preloaded fonts with font-display: swap\n- Optimized images with proper sizing and formats\n- Minimal CSS with no unused styles\n- Strategic use of preloading for critical resources\n\n## Design Decisions\n\nThe design focuses on readability and minimalism while maintaining visual interest through:\n- Subtle animations and transitions\n- Strategic use of whitespace\n- Typography-first approach\n- Dark theme optimization\n\nBuilding a portfolio is more than just showcasing work - it's about creating an experience that reflects your attention to detail and technical expertise.","src/content/blog/building-a-modern-portfolio.md","08bd3d9b7e89ba3c",{"html":127,"metadata":128},"\u003Cp>Building a modern portfolio website requires careful consideration of performance, user experience, and maintainability. In this post, I’ll share my experience building this website using Astro, a modern static site generator that offers excellent performance out of the box.\u003C/p>\n\u003Ch2 id=\"why-astro\">Why Astro?\u003C/h2>\n\u003Cp>Astro has become my go-to choice for static websites due to its unique approach to JavaScript - it ships zero JavaScript by default unless explicitly needed. This results in incredibly fast page loads and excellent performance scores.\u003C/p>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Zero JavaScript by Default\u003C/strong>: Pages load incredibly fast with minimal JavaScript\u003C/li>\n\u003Cli>\u003Cstrong>Content Collections\u003C/strong>: Markdown-based content management with type safety\u003C/li>\n\u003Cli>\u003Cstrong>View Transitions\u003C/strong>: Smooth page transitions for a native app-like feel\u003C/li>\n\u003Cli>\u003Cstrong>Excellent DX\u003C/strong>: TypeScript support and great developer tooling\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"performance-optimizations\">Performance Optimizations\u003C/h2>\n\u003Cp>The site achieves perfect Lighthouse scores through several optimizations:\u003C/p>\n\u003Cul>\n\u003Cli>Preloaded fonts with font-display: swap\u003C/li>\n\u003Cli>Optimized images with proper sizing and formats\u003C/li>\n\u003Cli>Minimal CSS with no unused styles\u003C/li>\n\u003Cli>Strategic use of preloading for critical resources\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"design-decisions\">Design Decisions\u003C/h2>\n\u003Cp>The design focuses on readability and minimalism while maintaining visual interest through:\u003C/p>\n\u003Cul>\n\u003Cli>Subtle animations and transitions\u003C/li>\n\u003Cli>Strategic use of whitespace\u003C/li>\n\u003Cli>Typography-first approach\u003C/li>\n\u003Cli>Dark theme optimization\u003C/li>\n\u003C/ul>\n\u003Cp>Building a portfolio is more than just showcasing work - it’s about creating an experience that reflects your attention to detail and technical expertise.\u003C/p>",{"headings":129,"imagePaths":142,"frontmatter":143},[130,133,136,139],{"depth":26,"slug":131,"text":132},"why-astro","Why Astro?",{"depth":26,"slug":134,"text":135},"key-features","Key Features",{"depth":26,"slug":137,"text":138},"performance-optimizations","Performance Optimizations",{"depth":26,"slug":140,"text":141},"design-decisions","Design Decisions",[],{"title":120,"description":121,"publishedAt":144},["Date","2023-12-15T00:00:00.000Z"],"devcontainers",{"id":145,"data":147,"body":151,"filePath":152,"digest":153,"rendered":154},{"title":148,"description":149,"publishedAt":150,"draft":17},"DevContainers: The Art of Portable Development Environments","Pack your dev environment in a box and take it anywhere",["Date","2024-09-16T00:00:00.000Z"],"## The Environment Enigma\n\nYou're staring at your screen, eyes bloodshot, coffee cold. The code that worked perfectly on your machine is now throwing a tantrum on your colleague's laptop. Sound familiar? Of course it does. You're a developer, after all. You've been here before, and you'll be here again.\n\nBut what if I told you there was a way to pack up your entire development environment and take it with you? A way to ensure that your code runs the same way, every time, everywhere? Enter the world of DevContainers.\n\n## DevContainers: Your Development Environment in a Box\n\nImagine you had a magical box. No matter where you go or what machine you're on, you can open this box and voila! Your perfect development environment springs to life. That's DevContainers in a nutshell. It's like a portable, self-contained dev environment that follows you across devices and operating systems.\n\n```json\n{\n  \"name\": \"Node.js Development\",\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:0-18\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"dbaeumer.vscode-eslint\",\n        \"esbenp.prettier-vscode\"\n      ]\n    }\n  },\n  \"forwardPorts\": [3000],\n  \"postCreateCommand\": \"npm install\"\n}\n```\n\nLook at that! With just a few lines of JSON, we've defined an entire Node.js development environment. It's like magic, but better—it's DevContainers.\n\n## Where the Magic Happens\n\nNow, you might be thinking, \"Great, another tool I'll never use.\" But hold your horses, dear developer. This isn't just some fancy trick to impress your coworkers (though it will). It's a game-changer for real-world scenarios.\n\n1. **Onboarding: The New Developer Whisperer**\nPicture this: You've got a new developer joining your team, and you need to get them up and running. Without DevContainers, you'd be sending them a 50-page setup document and praying they don't miss a step. With DevContainers? It's smooth sailing.\n\n```json\n{\n  \"name\": \"Team Project Environment\",\n  \"image\": \"mcr.microsoft.com/devcontainers/base:ubuntu\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/node:1\": {},\n    \"ghcr.io/devcontainers/features/python:1\": {},\n    \"ghcr.io/devcontainers/features/go:1\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-python.python\",\n        \"golang.go\",\n        \"dbaeumer.vscode-eslint\"\n      ]\n    }\n  },\n  \"postCreateCommand\": \"scripts/setup.sh\"\n}\n```\n\nYour new developer is now a mind reader, instantly synced with your project's environment. Impressive, right?\n\n2. **Cross-Platform Development: The OS Whisperer**\nLogs are the breadcrumbs of the digital world. But what good are they if you can't tell which crumb belongs to which trail? DevContainers to the rescue!\n\n```json\n{\n  \"name\": \"Cross-Platform App\",\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\",\n    \"args\": { \"VARIANT\": \"16-bullseye\" }\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-vscode.cpptools\",\n        \"twxs.cmake\",\n        \"ms-vscode.cmake-tools\"\n      ]\n    }\n  },\n  \"runArgs\": [\"--cap-add=SYS_PTRACE\", \"--security-opt\", \"seccomp=unconfined\"]\n}\n```\n\nNow your development environment is like a well-trained chameleon. Windows, macOS, Linux? It doesn't care. It just works.\n\n## The Art of Container Crafting\n\nNow that you're armed with this magical box, you might be tempted to stuff it full of every development tool known to mankind. But hold on there, packrat. Here are some golden rules for using DevContainers:\n\n1. **Start Lean, Grow as Needed**: Begin with a minimal configuration and add tools as you need them. It's like packing for a trip - start with the essentials and add extras only if you have space.\n2. **Version Control Your Containers**: Keep your DevContainer configurations in version control. It's like having a blueprint for your development environment. Future you will thank present you.\n3. **Optimize for Speed**: Use multi-stage builds and mount your source code as a volume. Your DevContainer should spin up faster than you can say \"It works on my machine\".\n4. **Expect the Unexpected**: Implement fallback options. Sometimes your magical box might not open as expected. Be prepared with a Plan B.\n\n## Embrace the Box\n\nDevContainers aren't just a feature—they're a superpower. They allow you to write code that's not just portable, but predictable. It's the difference between shipping your development environment and hoping for the best, and knowing it'll work everywhere.\n\nWhether you're onboarding new team members, developing cross-platform applications, or just trying to maintain sanity across multiple projects, DevContainers are your new best friend. They're the tool you didn't know you needed, but won't be able to live without.\n\nSo go forth, dear developer. Embrace the box. Let your code run free, unshackled by the constraints of individual machines. And remember, in the wild west of software development, a well-crafted DevContainer can make all the difference between \"It works on my machine\" and \"It works. Period.\"\n\nHappy coding, and may your development environments always feel like home, no matter where you are!","src/content/blog/devcontainers.md","c804ca0b8b5a96f6",{"html":155,"metadata":156},"\u003Ch2 id=\"the-environment-enigma\">The Environment Enigma\u003C/h2>\n\u003Cp>You’re staring at your screen, eyes bloodshot, coffee cold. The code that worked perfectly on your machine is now throwing a tantrum on your colleague’s laptop. Sound familiar? Of course it does. You’re a developer, after all. You’ve been here before, and you’ll be here again.\u003C/p>\n\u003Cp>But what if I told you there was a way to pack up your entire development environment and take it with you? A way to ensure that your code runs the same way, every time, everywhere? Enter the world of DevContainers.\u003C/p>\n\u003Ch2 id=\"devcontainers-your-development-environment-in-a-box\">DevContainers: Your Development Environment in a Box\u003C/h2>\n\u003Cp>Imagine you had a magical box. No matter where you go or what machine you’re on, you can open this box and voila! Your perfect development environment springs to life. That’s DevContainers in a nutshell. It’s like a portable, self-contained dev environment that follows you across devices and operating systems.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Node.js Development\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcr.microsoft.com/devcontainers/javascript-node:0-18\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"customizations\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"vscode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"extensions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"dbaeumer.vscode-eslint\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"esbenp.prettier-vscode\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"forwardPorts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#79B8FF\">3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"postCreateCommand\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npm install\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Look at that! With just a few lines of JSON, we’ve defined an entire Node.js development environment. It’s like magic, but better—it’s DevContainers.\u003C/p>\n\u003Ch2 id=\"where-the-magic-happens\">Where the Magic Happens\u003C/h2>\n\u003Cp>Now, you might be thinking, “Great, another tool I’ll never use.” But hold your horses, dear developer. This isn’t just some fancy trick to impress your coworkers (though it will). It’s a game-changer for real-world scenarios.\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Onboarding: The New Developer Whisperer\u003C/strong>\nPicture this: You’ve got a new developer joining your team, and you need to get them up and running. Without DevContainers, you’d be sending them a 50-page setup document and praying they don’t miss a step. With DevContainers? It’s smooth sailing.\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Team Project Environment\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcr.microsoft.com/devcontainers/base:ubuntu\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"features\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"ghcr.io/devcontainers/features/node:1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"ghcr.io/devcontainers/features/python:1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"ghcr.io/devcontainers/features/go:1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"customizations\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"vscode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"extensions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"ms-python.python\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"golang.go\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"dbaeumer.vscode-eslint\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"postCreateCommand\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"scripts/setup.sh\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Your new developer is now a mind reader, instantly synced with your project’s environment. Impressive, right?\u003C/p>\n\u003Col start=\"2\">\n\u003Cli>\u003Cstrong>Cross-Platform Development: The OS Whisperer\u003C/strong>\nLogs are the breadcrumbs of the digital world. But what good are they if you can’t tell which crumb belongs to which trail? DevContainers to the rescue!\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Cross-Platform App\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"build\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"dockerfile\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Dockerfile\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"VARIANT\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"16-bullseye\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"customizations\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"vscode\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"extensions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"ms-vscode.cpptools\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"twxs.cmake\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"ms-vscode.cmake-tools\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"runArgs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--cap-add=SYS_PTRACE\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--security-opt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"seccomp=unconfined\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now your development environment is like a well-trained chameleon. Windows, macOS, Linux? It doesn’t care. It just works.\u003C/p>\n\u003Ch2 id=\"the-art-of-container-crafting\">The Art of Container Crafting\u003C/h2>\n\u003Cp>Now that you’re armed with this magical box, you might be tempted to stuff it full of every development tool known to mankind. But hold on there, packrat. Here are some golden rules for using DevContainers:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Start Lean, Grow as Needed\u003C/strong>: Begin with a minimal configuration and add tools as you need them. It’s like packing for a trip - start with the essentials and add extras only if you have space.\u003C/li>\n\u003Cli>\u003Cstrong>Version Control Your Containers\u003C/strong>: Keep your DevContainer configurations in version control. It’s like having a blueprint for your development environment. Future you will thank present you.\u003C/li>\n\u003Cli>\u003Cstrong>Optimize for Speed\u003C/strong>: Use multi-stage builds and mount your source code as a volume. Your DevContainer should spin up faster than you can say “It works on my machine”.\u003C/li>\n\u003Cli>\u003Cstrong>Expect the Unexpected\u003C/strong>: Implement fallback options. Sometimes your magical box might not open as expected. Be prepared with a Plan B.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"embrace-the-box\">Embrace the Box\u003C/h2>\n\u003Cp>DevContainers aren’t just a feature—they’re a superpower. They allow you to write code that’s not just portable, but predictable. It’s the difference between shipping your development environment and hoping for the best, and knowing it’ll work everywhere.\u003C/p>\n\u003Cp>Whether you’re onboarding new team members, developing cross-platform applications, or just trying to maintain sanity across multiple projects, DevContainers are your new best friend. They’re the tool you didn’t know you needed, but won’t be able to live without.\u003C/p>\n\u003Cp>So go forth, dear developer. Embrace the box. Let your code run free, unshackled by the constraints of individual machines. And remember, in the wild west of software development, a well-crafted DevContainer can make all the difference between “It works on my machine” and “It works. Period.”\u003C/p>\n\u003Cp>Happy coding, and may your development environments always feel like home, no matter where you are!\u003C/p>",{"headings":157,"imagePaths":173,"frontmatter":174},[158,161,164,167,170],{"depth":26,"slug":159,"text":160},"the-environment-enigma","The Environment Enigma",{"depth":26,"slug":162,"text":163},"devcontainers-your-development-environment-in-a-box","DevContainers: Your Development Environment in a Box",{"depth":26,"slug":165,"text":166},"where-the-magic-happens","Where the Magic Happens",{"depth":26,"slug":168,"text":169},"the-art-of-container-crafting","The Art of Container Crafting",{"depth":26,"slug":171,"text":172},"embrace-the-box","Embrace the Box",[],{"title":148,"description":149,"publishedAt":175,"tags":176},["Date","2024-09-16T00:00:00.000Z"],[145,177,178,179,180],"development-environment","docker","vscode","productivity","notes",["Map",183,184],"postgresql-basic",{"id":183,"data":185,"body":190,"filePath":191,"digest":192,"rendered":193},{"title":186,"description":187,"publishedAt":188,"category":189,"draft":17},"PostgreSQL Basic Commands","Essential PostgreSQL commands for database management and administration",["Date","2024-03-20T00:00:00.000Z"],"Database","Here are some essential PostgreSQL commands I frequently use:\n\n## Service Management\n\nManaging PostgreSQL service on Linux systems:\n\n```bash\nsudo systemctl start postgresql    # Start PostgreSQL service\nsudo systemctl enable postgresql   # Enable auto-start on boot\nsudo systemctl stop postgresql     # Stop PostgreSQL service\n```\n\n## User Access & Authentication\n\nBasic user access commands:\n\n```bash\nsudo su - postgres                 # Switch to postgres user\npsql                              # Enter PostgreSQL prompt\n```\n\n## System Information\n\nChecking system and configuration details:\n\n```sql\nSELECT version();                  # Check PostgreSQL version\nSHOW config_file;                 # Show config file location\nSHOW hba_file;                    # Show HBA file location\n\\! more /etc/postgresql/14/main/postgresql.conf    # View config file\n\\! more /etc/postgresql/14/main/pg_hba.conf       # View HBA file\n```\n\n## User Management\n\nManaging database users and roles:\n\n```sql\n\\du                               # List all users/roles\nALTER USER postgres WITH PASSWORD 'your_secure_password';   # Change postgres password\nCREATE USER john WITH PASSWORD 'secure_password123';        # Create new user\n```\n\n## Database Operations\n\nCommon database management commands:\n\n```sql\n\\l                               # List all databases\nCREATE DATABASE myproject;        # Create new database\nSELECT datname FROM pg_database; # List databases (SQL query)\n\\c myproject                     # Connect to database\n\\connect postgres                # Connect to postgres database\n```\n\n## Navigation & Help\n\nUseful navigation and help commands:\n\n```sql\n\\dt                             # List tables in current database\n\\q                              # Exit PostgreSQL prompt\n\\h                             # SQL commands help\n\\?                             # PostgreSQL commands help\n\\conninfo                      # Show connection info\n```\n\n## Important Notes\n\nWhen working with PostgreSQL, remember:\n\n- Always use strong passwords for database users\n- Configuration file paths might vary based on PostgreSQL version\n- Default port is 5432\n- SQL commands must end with semicolon (;)\n- Backslash (\\) commands don't need semicolons","src/content/notes/postgresql-basic.md","7e35e92e92d78304",{"html":194,"metadata":195},"\u003Cp>Here are some essential PostgreSQL commands I frequently use:\u003C/p>\n\u003Ch2 id=\"service-management\">Service Management\u003C/h2>\n\u003Cp>Managing PostgreSQL service on Linux systems:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> systemctl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgresql\u003C/span>\u003Cspan style=\"color:#6A737D\">    # Start PostgreSQL service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> systemctl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> enable\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgresql\u003C/span>\u003Cspan style=\"color:#6A737D\">   # Enable auto-start on boot\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> systemctl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> stop\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgresql\u003C/span>\u003Cspan style=\"color:#6A737D\">     # Stop PostgreSQL service\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"user-access--authentication\">User Access &#x26; Authentication\u003C/h2>\n\u003Cp>Basic user access commands:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> su\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> -\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postgres\u003C/span>\u003Cspan style=\"color:#6A737D\">                 # Switch to postgres user\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">psql\u003C/span>\u003Cspan style=\"color:#6A737D\">                              # Enter PostgreSQL prompt\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"system-information\">System Information\u003C/h2>\n\u003Cp>Checking system and configuration details:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> version\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();                  # \u003C/span>\u003Cspan style=\"color:#F97583\">Check\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PostgreSQL \u003C/span>\u003Cspan style=\"color:#F97583\">version\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">SHOW config_file;                 # Show config \u003C/span>\u003Cspan style=\"color:#F97583\">file\u003C/span>\u003Cspan style=\"color:#F97583\"> location\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">SHOW hba_file;                    # Show HBA \u003C/span>\u003Cspan style=\"color:#F97583\">file\u003C/span>\u003Cspan style=\"color:#F97583\"> location\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\! more \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">etc\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">postgresql\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">14\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">main\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">postgresql\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">conf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">    # View config \u003C/span>\u003Cspan style=\"color:#F97583\">file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\! more \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">etc\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">postgresql\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">14\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">main\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">pg_hba\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">conf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">       # View HBA \u003C/span>\u003Cspan style=\"color:#F97583\">file\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"user-management\">User Management\u003C/h2>\n\u003Cp>Managing database users and roles:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\du                               # List all users\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">roles\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ALTER\u003C/span>\u003Cspan style=\"color:#F97583\"> USER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> postgres \u003C/span>\u003Cspan style=\"color:#F97583\">WITH\u003C/span>\u003Cspan style=\"color:#F97583\"> PASSWORD\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'your_secure_password'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;   # Change postgres \u003C/span>\u003Cspan style=\"color:#F97583\">password\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> USER\u003C/span>\u003Cspan style=\"color:#B392F0\"> john\u003C/span>\u003Cspan style=\"color:#F97583\"> WITH\u003C/span>\u003Cspan style=\"color:#F97583\"> PASSWORD\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'secure_password123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;        # \u003C/span>\u003Cspan style=\"color:#F97583\">Create\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> new user\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"database-operations\">Database Operations\u003C/h2>\n\u003Cp>Common database management commands:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\l                               # List all databases\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> DATABASE\u003C/span>\u003Cspan style=\"color:#B392F0\"> myproject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;        # \u003C/span>\u003Cspan style=\"color:#F97583\">Create\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> new \u003C/span>\u003Cspan style=\"color:#F97583\">database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> datname \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pg_database; # List databases (\u003C/span>\u003Cspan style=\"color:#F97583\">SQL\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> query)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\c myproject                     # \u003C/span>\u003Cspan style=\"color:#F97583\">Connect\u003C/span>\u003Cspan style=\"color:#F97583\"> to\u003C/span>\u003Cspan style=\"color:#F97583\"> database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\\u003C/span>\u003Cspan style=\"color:#F97583\">connect\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> postgres                # \u003C/span>\u003Cspan style=\"color:#F97583\">Connect\u003C/span>\u003Cspan style=\"color:#F97583\"> to\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> postgres \u003C/span>\u003Cspan style=\"color:#F97583\">database\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"navigation--help\">Navigation &#x26; Help\u003C/h2>\n\u003Cp>Useful navigation and help commands:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\dt                             # List tables \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current \u003C/span>\u003Cspan style=\"color:#F97583\">database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\q                              # Exit PostgreSQL prompt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\h                             # \u003C/span>\u003Cspan style=\"color:#F97583\">SQL\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> commands help\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\?                             # PostgreSQL commands help\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\\conninfo                      # Show \u003C/span>\u003Cspan style=\"color:#F97583\">connection\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> info\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"important-notes\">Important Notes\u003C/h2>\n\u003Cp>When working with PostgreSQL, remember:\u003C/p>\n\u003Cul>\n\u003Cli>Always use strong passwords for database users\u003C/li>\n\u003Cli>Configuration file paths might vary based on PostgreSQL version\u003C/li>\n\u003Cli>Default port is 5432\u003C/li>\n\u003Cli>SQL commands must end with semicolon (;)\u003C/li>\n\u003Cli>Backslash () commands don’t need semicolons\u003C/li>\n\u003C/ul>",{"headings":196,"imagePaths":218,"frontmatter":219},[197,200,203,206,209,212,215],{"depth":26,"slug":198,"text":199},"service-management","Service Management",{"depth":26,"slug":201,"text":202},"user-access--authentication","User Access & Authentication",{"depth":26,"slug":204,"text":205},"system-information","System Information",{"depth":26,"slug":207,"text":208},"user-management","User Management",{"depth":26,"slug":210,"text":211},"database-operations","Database Operations",{"depth":26,"slug":213,"text":214},"navigation--help","Navigation & Help",{"depth":26,"slug":216,"text":217},"important-notes","Important Notes",[],{"title":186,"description":187,"publishedAt":220,"category":189},["Date","2024-03-20T00:00:00.000Z"],"experience",["Map",223,224,236,237,248,249],"livinart",{"id":223,"data":225,"filePath":232,"digest":233,"rendered":234},{"title":226,"logo":227,"url":228,"description":229,"startDate":230,"endDate":231,"current":17},"Full Stack Developer at Livinart Technologies","/images/companies/livinart.png","https://livinarttech.com","Led end-to-end development of multiple web applications at Livinart Technologies, including Liumgo (EV delivery platform) and Jodo-Cabs (ride-hailing service). Architected scalable solutions using React.js and Node.js with MongoDB. Implemented real-time tracking, payment gateway integrations, and secure user authentication. Built responsive UI components, RESTful APIs, and WebSocket features for live updates. Optimized database queries and API performance. Mentored junior developers and collaborated with product teams to deliver high-impact features on schedule.",["Date","2023-10-01T00:00:00.000Z"],["Date","2024-02-01T00:00:00.000Z"],"src/content/experience/livinart.md","93ea81a811c53893",{"html":235},"","wisewaytec",{"id":236,"data":238,"filePath":245,"digest":246,"rendered":247},{"title":239,"logo":240,"url":241,"description":242,"startDate":243,"current":244},"Full Stack Developer at Wisewaytec","/images/companies/wisewaytec.jpg","https://wisewaytec.com","Enhanced P2P exchange platform with Vue.js and Node.js, implementing KYC verification, end-to-end messaging, and live support chat. Developed multiple Telegram mini apps using React.js and Node.js featuring TON blockchain payments, multi-wallet support, graphical tapping system, and 5-level referral program. Built robust backend APIs and managed MySQL/SQLite databases for scalable performance.",["Date","2024-09-01T00:00:00.000Z"],true,"src/content/experience/wisewaytec.md","bd79af6ff7ce2e06",{"html":235},"wiselogics",{"id":248,"data":250,"filePath":257,"digest":258,"rendered":259},{"title":251,"logo":252,"url":253,"description":254,"startDate":255,"endDate":256,"current":17},"Full Stack Developer at Wise Logics Digital Solutions","/images/companies/wiselogics.jpg","https://wiselogicsdigitalsolutions.com","Built multiple company websites including Wiselogics Digital Solutions, Wiselogics LLC, and BestTrackSolution using the MERN stack with modern responsive designs. Developed secure APIs using Python Flask and implemented VPS hosting with Nginx configuration. Gained expertise in database configuration, server deployment, and infrastructure management. Focused on creating performant web applications with clean architecture and maintainable codebases.",["Date","2024-03-01T00:00:00.000Z"],["Date","2024-08-31T00:00:00.000Z"],"src/content/experience/wiselogics.md","71a885c6466f3e1f",{"html":235},"projects",["Map",262,263,281,282,295,296,306,307],"bazaar",{"id":262,"data":264,"filePath":278,"digest":279,"rendered":280},{"title":265,"description":266,"url":267,"featured":244,"techs":268},"Bazaar","A full-stack e-commerce platform built with the MERN stack. Features include secure user authentication with JWT, real-time shopping cart management, Stripe payment processing, order tracking and history, product search and filtering, responsive Material UI design, and cloud storage integration with Firebase for product images. Implemented RESTful APIs for inventory management, optimized MongoDB queries for performance, and followed best practices for secure payment handling and user data protection.","https://github.com/SurajG20/Ecommerce-Website",[269,270,271,272,273,274,275,276,277],"React","Node.js","MongoDB","Express","Material UI","Firebase","Stripe","JWT","REST API","src/content/projects/bazaar.md","cf4f37c3841d9555",{"html":235},"cinemato",{"id":281,"data":283,"filePath":292,"digest":293,"rendered":294},{"title":284,"description":285,"url":286,"featured":244,"techs":287},"Cinemato","A dynamic movie discovery platform built with React and TMDB API. Features include real-time search with auto-suggestions, comprehensive movie/TV show details including cast info and trailers, user ratings and reviews, watchlist functionality, and a fully responsive design optimized for all devices. Implemented efficient API data caching, infinite scroll pagination, and modern UI/UX principles for seamless content exploration.","https://cinemato-two.vercel.app/",[269,288,289,290,291,277],"TMDB API","Redux","Tailwind CSS","TypeScript","src/content/projects/cinemato.md","3808f6569826116e",{"html":235},"expense-tracker",{"id":295,"data":297,"filePath":303,"digest":304,"rendered":305},{"title":298,"description":299,"url":300,"featured":244,"techs":301},"Expense Tracker","A full-stack personal finance management application built with the MERN stack. Features include real-time expense tracking, interactive data visualization with Chart.js, customizable budget categories, detailed transaction history, and insightful spending analytics. Implemented secure user authentication, RESTful APIs for CRUD operations, and responsive Material UI design for seamless cross-device usage. MongoDB integration enables efficient data persistence and querying capabilities.","https://github.com/SurajG20/Expense-Tracker",[269,271,302,270,272,273,277,276],"Chart.js","src/content/projects/expense-tracker.md","a8d531d4098e50dc",{"html":235},"urban-garage",{"id":306,"data":308,"filePath":313,"digest":314,"rendered":315},{"title":309,"description":310,"url":311,"featured":244,"techs":312},"Urban Garage","A comprehensive automotive marketplace platform built with the MERN stack. Features include real-time inventory management, secure user authentication, dynamic vehicle listings with search and filters, appointment scheduling, and an intuitive admin dashboard powered by Redux for seamless state management. Implemented RESTful APIs, MongoDB database optimization, and responsive UI design following modern web development best practices.","https://github.com/SurajG20/Urban_Garage_Turtle_Wax",[269,270,271,289,272,276,277,273],"src/content/projects/urban-garage.md","365e329266893090",{"html":235},"bookmarks",["Map",318,319,330,331,342,343,354,355],"dreams-of-code",{"id":318,"data":320,"filePath":327,"digest":328,"rendered":329},{"title":321,"type":322,"author":321,"url":323,"publishedAt":324,"createdAt":325,"description":326},"Dreams of Code","video","https://youtube.com/@dreamsofcode?si=-v7boSNGUU7qnjQc",["Date","2025-01-25T00:00:00.000Z"],["Date","2025-01-25T00:00:00.000Z"],"This guy make good content about vps and hosting.","src/content/bookmarks/dreams-of-code.md","4abb4102186e344a",{"html":235},"free-will",{"id":330,"data":332,"filePath":339,"digest":340,"rendered":341},{"title":333,"type":322,"author":334,"url":335,"publishedAt":336,"createdAt":337,"description":338},"Free Will, Determinism and Choice","Peter Millican","https://youtu.be/XT6DKn6ZJso",["Date","2011-04-14T00:00:00.000Z"],["Date","2011-04-14T00:00:00.000Z"],"Examined free will, determinism, and choice, analyzing their impact on decision-making and ethics, and applied these concepts to understand user behavior in tech design.","src/content/bookmarks/free-will.md","7be48edef94d0502",{"html":235},"how-to-learn",{"id":342,"data":344,"filePath":351,"digest":352,"rendered":353},{"title":345,"type":322,"author":346,"url":347,"publishedAt":348,"createdAt":349,"description":350},"Learning How to Learn","Barbara Oakley","https://youtu.be/O96fE1E-rf8",["Date","2014-08-06T00:00:00.000Z"],["Date","2014-08-06T00:00:00.000Z"],"Barbara Oakley's 'Learning How to Learn' techniques to enhance focus, memory, and problem-solving for improved productivity in technical and creative projects.","src/content/bookmarks/how-to-learn.md","150c24a6ad2799d7",{"html":235},"naval-ravikant",{"id":354,"data":356,"filePath":364,"digest":365,"rendered":366},{"title":357,"type":358,"author":359,"url":360,"publishedAt":361,"createdAt":362,"description":363},"The Almanack of Naval Ravikant","book","Eric Jorgenson","https://www.navalmanack.com/",["Date","2020-08-15T00:00:00.000Z"],["Date","2020-08-15T00:00:00.000Z"],"Naval Ravikant's wisdom on life, work, and happiness.","src/content/bookmarks/naval-ravikant.md","4d7ef1601c299510",{"html":235},"site",["Map",369,370],"home",{"id":369,"data":371,"filePath":394},{"name":372,"title":373,"introduction":374,"sections":375,"socialLinks":385},"Suraj Goswami","Software Developer","I'm a Full Stack Developer specializing in building scalable web applications with React, Node.js and cloud platforms. I focus on creating efficient, user-centric solutions while continuously expanding my technical skills.",{"blog":376,"projects":379,"experience":382},{"title":377,"viewAllText":378},"Writing","View all posts",{"title":380,"viewAllText":381},"Projects","View all projects",{"title":383,"viewAllText":384},"Experience","View full résumé",[386,389,392],{"platform":387,"url":388},"GitHub","https://github.com/surajG20",{"platform":390,"url":391},"Linkedin","https://www.linkedin.com/in/suraj-goswami01",{"platform":393,"url":391},"Resume","src/content/site/config.json"]